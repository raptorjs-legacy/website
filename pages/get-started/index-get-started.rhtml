<c:template
    xmlns:c="core"
    xmlns:html="html"
    xmlns:optimizer="optimizer"
    xmlns:w="widgets"
    xmlns:docs="docs"
    params="includes,samples"
    docs:functions="url">

    <optimizer:page name="${data.pageName}" base-path="${data.pageOutputDir}">
        <dependencies>
            <module name="docs-global"/>
            <module name="components/nav/TopNavDefault"/>
            <module name="components/footers/FooterDefault"/>
            <module name="components/docs/Docs"/>
            <module name="components/editors/CodeEditor"/>
            <css path="index.css"/>
        </dependencies>
    </optimizer:page>

    
    <html html:doctype="html">
        <docs:head title="RaptorJS: Get Started">
        </docs:head>
        <body data-spy="scroll">
            <docs:top-nav activeItem="get-started"/>
            <div class="container">
                <docs:docs heading="Get Started with RaptorJS" disqus-id="get-started">
        
                    <docs:section heading="Overview">
                        <p>
                            This guide will help you quickly (less than 10 minutes) get started building
                            a production-ready web application using RaptorJS, Node.js, Express and
                            various other open source modules for Node.js.
                        </p>
                        <p>
                            RaptorJS includes a powerful command line interface that supports
                            scaffolding so that you can quickly generate applications,
                            pages, UI components and shareable libraries. For this guide we will
                            be using this RaptorJS command line interface to build
                            a web application from scratch. The basic commands are the following:
                        </p>
                        <pre class="sh" xml:space="preserve" c:trim-body-indent="true">
                        npm install raptor --global
                        mkdir my-app
                        cd my-app
                        raptor create webapp
                        raptor create page test
                        raptor create component test/MyComponent
                        npm install
                        node server.js
                        </pre>
                        <p>
                            Each of these commands and additional
                            setup tasks are described in more detail in the sections below.
                        </p>
                    </docs:section>
                        
                    <docs:section heading="Installing Node.js">
                        <p>
                            The first step to using RaptorJS is to install the latest version of Node.js. 
                            If you have not yet installed Node.js then head over to the 
                            <a href="http://nodejs.org/">Node.js website</a> and download and install the appropriate
                            version of Node.js for your operating system.
                        </p>
                    </docs:section>

                    <docs:section heading="Installing the RaptorJS CLI">
                        <p>
                            To install the command line interface for RaptorJS
                            run the following command in your terminal:
                        </p>
                        <pre class="sh" xml:space="preserve" c:trim-body-indent="true">
                        $ npm install raptor --global
                        </pre>
                        <docs:message type="info">
                            <p>
                                NOTE: You will need to give administrative rights when installing a Node package
                                globally so typically the above command will be used with the <code>sudo</code> command
                                on Mac and Linux:
                            </p>
                            <pre class="sh" xml:space="preserve" c:trim-body-indent="true">
                            $ sudo npm install raptor --global
                            </pre>
                        </docs:message>
                    </docs:section>

                    <docs:section heading="Generating a Webapp">
                        <p>
                            Now that the RaptorJS command line interface has been install
                            via the Node.js package manager (npm), you can now use
                            the <code>raptor</code> command to create a new webapp
                            as shown in the following command line code:
                        </p>
                        <pre class="sh" xml:space="preserve" c:trim-body-indent="true">
                        $ mkdir my-app
                        $ cd my-app
                        $ raptor create webapp
                        </pre>
                        <p>
                            You will see output similar to the following in your console:
                        </p>
                        <pre class="sh" xml:space="preserve" c:trim-body-indent="true" c:escape-xml="false"
                            style="height: 200px; overflow-y: auto;">
                        <![CDATA[
                        Running command "create webapp" (stack: raptorjs)...
                        <span style="color: green;">[create]</span> .gitignore
                        <span style="color: green;">[create]</span> .jshintignore
                        <span style="color: green;">[create]</span> .jshintrc
                        <span style="color: green;">[create]</span> README.md
                        <span style="color: green;">[create]</span> my-app.sublime-project
                        <span style="color: green;">[create]</span> config/config.json
                        <span style="color: green;">[create]</span> config/optimizer-config.xml
                        <span style="color: green;">[create]</span> package.json
                        <span style="color: green;">[create]</span> rapido.json
                        <span style="color: green;">[create]</span> routes.js
                        <span style="color: green;">[create]</span> server.js
                        <span style="color: green;">[create]</span> src/app.rtld
                        <span style="color: green;">[create]</span> src/ebay-api/finding/finding.js
                        <span style="color: green;">[create]</span> src/ebay-api/finding/finding_jquery.js
                        <span style="color: green;">[create]</span> src/ebay-api/finding/finding_node.js
                        <span style="color: green;">[create]</span> src/ebay-api/finding/package.json
                        <span style="color: green;">[create]</span> src/ui/components/buttons/SimpleButton/SimpleButton.css
                        <span style="color: green;">[create]</span> src/ui/components/buttons/SimpleButton/SimpleButton.rhtml
                        <span style="color: green;">[create]</span> src/ui/components/buttons/SimpleButton/SimpleButton.rtld
                        <span style="color: green;">[create]</span> src/ui/components/buttons/SimpleButton/SimpleButtonRenderer.js
                        <span style="color: green;">[create]</span> src/ui/components/buttons/SimpleButton/SimpleButtonWidget.js
                        <span style="color: green;">[create]</span> src/ui/components/buttons/SimpleButton/package.json
                        <span style="color: green;">[create]</span> src/ui/components/demo/Simple/Simple.css
                        <span style="color: green;">[create]</span> src/ui/components/demo/Simple/Simple.rhtml
                        <span style="color: green;">[create]</span> src/ui/components/demo/Simple/Simple.rtld
                        <span style="color: green;">[create]</span> src/ui/components/demo/Simple/SimpleRenderer.js
                        <span style="color: green;">[create]</span> src/ui/components/demo/Simple/SimpleWidget.js
                        <span style="color: green;">[create]</span> src/ui/components/demo/Simple/package.json
                        <span style="color: green;">[create]</span> src/ui/components/demo/Simple/render-package.json
                        <span style="color: green;">[create]</span> src/ui/components/ebay/search/SearchResults/SearchResults.css
                        <span style="color: green;">[create]</span> src/ui/components/ebay/search/SearchResults/SearchResults.rhtml
                        <span style="color: green;">[create]</span> src/ui/components/ebay/search/SearchResults/SearchResults.rtld
                        <span style="color: green;">[create]</span> src/ui/components/ebay/search/SearchResults/SearchResultsRenderer.js
                        <span style="color: green;">[create]</span> src/ui/components/ebay/search/SearchResults/SearchResultsWidget.js
                        <span style="color: green;">[create]</span> src/ui/components/ebay/search/SearchResults/package.json
                        <span style="color: green;">[create]</span> src/ui/components/ebay/search/SearchResultsContainer/SearchResultsContainer.css
                        <span style="color: green;">[create]</span> src/ui/components/ebay/search/SearchResultsContainer/SearchResultsContainer.rhtml
                        <span style="color: green;">[create]</span> src/ui/components/ebay/search/SearchResultsContainer/SearchResultsContainer.rtld
                        <span style="color: green;">[create]</span> src/ui/components/ebay/search/SearchResultsContainer/SearchResultsContainerRenderer.js
                        <span style="color: green;">[create]</span> src/ui/components/ebay/search/SearchResultsContainer/SearchResultsContainerWidget.js
                        <span style="color: green;">[create]</span> src/ui/components/ebay/search/SearchResultsContainer/package.json
                        <span style="color: green;">[create]</span> src/ui/components/ebay/search/SearchResultsContainer/sample-data.json
                        <span style="color: green;">[create]</span> src/ui/components/ebay/search/SearchResultsContainer/wait-indicator.gif
                        <span style="color: green;">[create]</span> src/ui/components/nav/TopNav/TopNav.css
                        <span style="color: green;">[create]</span> src/ui/components/nav/TopNav/TopNav.rhtml
                        <span style="color: green;">[create]</span> src/ui/components/nav/TopNav/TopNav.rtld
                        <span style="color: green;">[create]</span> src/ui/components/nav/TopNav/TopNavRenderer.js
                        <span style="color: green;">[create]</span> src/ui/components/nav/TopNav/package.json
                        <span style="color: green;">[create]</span> src/ui/components/nav/TopNav/render-package.json
                        <span style="color: green;">[create]</span> src/ui/components/style/variables.less
                        <span style="color: green;">[create]</span> src/ui/pages/async-fragments/async-fragment.css
                        <span style="color: green;">[create]</span> src/ui/pages/async-fragments/async-fragments.rhtml
                        <span style="color: green;">[create]</span> src/ui/pages/async-fragments/index.js
                        <span style="color: green;">[create]</span> src/ui/pages/hello/index.js
                        <span style="color: green;">[create]</span> src/ui/pages/index/index.js
                        <span style="color: green;">[create]</span> src/ui/pages/index/index.less
                        <span style="color: green;">[create]</span> src/ui/pages/index/index.rhtml
                        <span style="color: green;">[create]</span> src/ui/pages/search-results/index.js
                        <span style="color: green;">[create]</span> src/ui/pages/search-results/search-results.css
                        <span style="color: green;">[create]</span> src/ui/pages/search-results/search-results.rhtml
                        <span style="color: green;">[create]</span> src/ui/pages/ui-components/index.js
                        <span style="color: green;">[create]</span> src/ui/pages/ui-components/ui-components.css
                        <span style="color: green;">[create]</span> src/ui/pages/ui-components/ui-components.rhtml
                        <span style="color: green;">[create]</span> src/ui/style/global/global.less
                        <span style="color: green;">[create]</span> src/ui/style/global/package.json
                        <span style="color: green;">[create]</span> src/ui/style/variables.less
                        [finished] Webapp written to "/Users/psteeleidem/temp/my-app"
                        All that is left is to run the following command:
                        <span style="color: cyan;">npm install</span>

                        Use the following command to start the server:
                        <span style="color: cyan;">node server.js --dev</span>
                        ]]>
                        </pre>
                        <p>
                            After running the above command a project with a structure similar to the following
                            will be generated:
                        </p>
                        <ul>
                            <li>
                                <b>config</b> - Configuration files directory
                                <ul>
                                    <li>optimizer-config.xml - Web resource optimization configuration (minification, bundling, etc.)</li>
                                    <li>config.json - Application-specific configuration options</li>
                                </ul>
                            </li>
                            <li>
                                <b>src</b> - Source code and application modules directory
                                <ul>
                                    <li>
                                        <b>my-module</b> - A module directory
                                    </li>
                                    <li>
                                        <b>ui</b> - UI modules directory (UI components and pages)
                                        <ul>
                                            <li>
                                                <b>components</b> - UI components directory
                                                <ul>
                                                    <li>
                                                        <b>MyComponent</b>
                                                        <ul>
                                                            <li>MyComponentRenderer.js - HTML renderer</li>
                                                            <li>MyComponentWidget.js - Client-side behavior</li>
                                                            <li>MyComponent.css - StyleSheet</li>
                                                            <li>MyComponent.rhtml - HTML template (used by the renderer)</li>
                                                            <li>MyComponent.rtld - Custom tag definition</li>
                                                            <li>package.json - UI component dependencies</li>
                                                        </ul>
                                                    </li>
                                                </ul>
                                            </li>
                                            <li>
                                                <b>pages</b> - Pages directory
                                                <ul>
                                                    <li>
                                                        <b>my-page</b>
                                                        <ul>
                                                            <li>index.js - Page module (exports controller)</li>
                                                            <li>my-page.css - Page-specific CSS</li>
                                                            <li>my-page.rhtml - Page template</li>
                                                        </ul>
                                                    </li>
                                                </ul>
                                            </li>
                                            <li>
                                                <b>style</b>
                                                <ul>
                                                    <li>
                                                        <b>global</b> - global style module
                                                    </li>
                                                    <li>variables.less - Variables used to define the Twitter Bootstrap theme</li>

                                                </ul>
                                            </li>
                                        </ul>
                                    </li>
                                    <li>app.rtld - Application-spcific custom tags for Raptor Templates</li>
                                </ul>
                            </li>
                            <li><b>work</b> - Temporary directory for compiled templates and optimized resources (can safely be deleted)</li>
                            <li>package.json- Node.js module dependencies for application (used by [npm](https://npmjs.org/))</li>
                            <li>rapido.json- Configuration file used by `raptor` (built on top of [Rápido](https://github.com/raptorjs/rapido))</li>
                            <li>routes.js - Registers all application routes (i.e. URL patterns)</li>
                            <li>server.js - Starts the Express HTTP server (or cluster)</li>
                        </ul>
                    </docs:section>

                    <docs:section heading="Installing Node Modules">
                        <p>
                            The generated web application depends on other open source modules
                            to function correctly. These dependencies must be downloaded
                            and installed using <code>npm</code> as shown in the following 
                            command line code:
                        </p>
                        <pre class="sh" xml:space="preserve" c:trim-body-indent="true">
                        $ npm install
                        </pre>
                        <p>
                            After less than a minute all of the dependencies will be downloaded
                            and installed to the <code>node_modules</code> directory.
                        </p>
                    </docs:section>
                    
                    <docs:section heading="Starting the Server">
                        <p>
                            Now that all of the Node module dependencies have been
                            downloaded and installed, the HTTP server for the generated
                            web application can be started using the following command:
                        </p>
                        <pre class="sh" xml:space="preserve" c:trim-body-indent="true">
                        $ node server.js
                        </pre>
                    </docs:section>

                    <docs:section heading="Testing the Server">
                        <p>
                            Now that the server has been started, we can test it
                            out by loading the following URL in your web browser:
                            <a href="http://localhost:8080/"><nobr>http://localhost:8080/</nobr></a>
                        </p>
                        <docs:section heading="Live Coding">
                            <p>
                                Without restarting the server and with the
                                index page still loaded in your web browser, 
                                open up the following file
                                in the editor of your choice:<br/>
                                <code><nobr>src/ui/pages/index/index.rhtml</nobr></code>
                            </p>
                            <p>
                                Make some changes to the "index" page by adding
                                some additional text into the body of the page.
                                After saving your changes, go back to your web
                                browser and you will notice that the changes you
                                made are <i>already</i> reflected on the previously
                                loaded page.
                            </p>
                            <p>
                                Out-of-the-box, the generated RaptorJS application
                                includes support for watching project source directories
                                for changes. When a file modification is detected
                                (via an instant notification from the operating system),
                                the server-side environment is refreshed by unloading
                                all previously loaded modules. In addition, a push
                                notification is immediately sent down to any connected
                                clients to let them know that files on the server were
                                modified and that the page should be reloaded.
                                The end result is <i>live coding</i>, regardless of which
                                editor/IDE or web browser you choose to use (awesome!).
                            </p>
                        </docs:section>
                    </docs:section>

                    

                    <docs:section heading="Adding a New Page">
                        <p>
                            A new page and the associated URL route can be added
                            to the generated application by running the following command:
                        </p>
                        <pre class="sh" xml:space="preserve" c:trim-body-indent="true">
                        $ raptor create page test
                        </pre>
                        <p>
                            Running the above command will result in a new page directory
                            named "test" being added to the <code>src/ui/pages</code>
                            directory. In addition, a new route for path "/test" will be added to
                            the <code>routes.js</code> file.
                        </p>
                        <p>
                            To test the new page load the following URL in your browser:
                            <a href="http://localhost:8080/test"><nobr>http://localhost:8080/test</nobr></a>
                        </p>
                        <p>
                            NOTE: Because the generated web application includes code that watches
                            for changes in the source directories for the application.
                            Therefore, a restart of the server is <i>not</i> required
                            in order to test the newly added page.
                        </p>
                    </docs:section>

                    <docs:section heading="Adding a New Component">
                        <p>
                            A new UI component can easily be added
                            to the generated application by running the following command:
                        </p>
                        <pre class="sh" xml:space="preserve" c:trim-body-indent="true">
                        $ raptor create component test/MyComponent
                        </pre>
                        <p>
                            Running the above command will result in a new UI component directory
                            being added to the following location:
                            <code><nobr>src/ui/components/test/MyComponent</nobr></code>.
                        </p>
                        <p>
                            The newly created UI component can be tested by embedding
                            the UI component in an existing page. Raptor Templates
                            supports "custom tags" and every generated UI component
                            will also include a custom tag definition. To embed
                            the newly created component in the previously created
                            page named "test", add the following code into the 
                            <code><nobr>src/ui/pages/test/test.rhtml</nobr></code> file:
                        </p>
                        <docs:code-editor 
                            mode="xml"
                            readOnly="true" 
                            c:parse-body-text="false">
                        <![CDATA[
                        <app:my-component name="Frank" count="30"/>
                        ]]>
                        </docs:code-editor>
                        <p>
                            In addition,
                            the newly created UI component also includes a <code>package.json</code>
                            that describes the dependencies for the UI component (i.e., CSS and JavaScript files
                            and other resources that are required for the UI component to function correctly in the web browser).
                            For the required resources for the UI component to be included on the page
                            you must add the module associated with the newly created UI component into
                            the &lt;optimizer:dependencies> section of the page as shown in teh following
                            code:
                        </p>
                        <docs:code-editor 
                            mode="xml"
                            readOnly="true" 
                            c:parse-body-text="false">
                        <![CDATA[
                        <optimizer:page ...>
                            <dependencies>
                                ...
                                <module name="ui/components/test/MyComponent"/>
                            </dependencies>
                        </optimizer:page> 
                        ]]>
                        </docs:code-editor>
                    </docs:section>


                    <docs:section heading="Further Reading">
                        <p>
                            Now that you have Node configured and a working web application built
                            using RaptorJS,
                            you are now more ready to start learning about the features of RaptorJS. To continue learning about RaptorJS, please
                            use the following links:
                        </p>
                        <ul>
                            <li>
                                <a href="${url('/modules-classes')}">Modules &amp; Classes</a>
                            </li>
                            <li>
                                <a href="${url('/packaging')}">Packaging &amp; Extensions</a>
                            </li>
                            <li>
                                <a href="${url('/module-loader')}">Module Loader</a>
                            </li>
                            <li>
                                <a href="${url('/optimizer')}">Optimizer</a>
                            </li>
                            <li>
                                <a href="${url('/raptor-templates')}">Raptor Templates</a>
                            </li>
                            <li>
                                <a href="${url('/widgets')}">Widget Framework</a>
                            </li>
                        </ul>
                        
                    </docs:section>
                    
                </docs:docs>
            </div>
            
            
            <optimizer:slot name="body"/>
            
            <w:init-widgets/>
        </body>
    </html>
</c:template>

