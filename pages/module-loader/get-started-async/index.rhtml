<c:template
    xmlns:c="core"
    xmlns:html="html"
    xmlns:optimizer="optimizer"
    xmlns:w="widgets"
    xmlns:docs="docs"
    params="includes,samples"
    docs:functions="url">

    <optimizer:page name="${data.pageName}" base-path="${data.pageOutputDir}">
        <dependencies>
            <module name="docs-global"/>
            <module name="components/nav/TopNavDefault"/>
            <module name="components/docs/Docs"/>
            <module name="components/icons/Icon"/>
            <css path="index.css"/>
        </dependencies>
    </optimizer:page>

    
    <html html:doctype="html">
        <head>
            <title>RaptorJS: Get Started using the Asynchronous Module Loader</title>
            <meta http-equiv="content-type" content="text/html; charset=UTF-8" />
            <meta name="viewport" content="width=device-width, initial-scale=1.0" />
            <optimizer:slot name="head"/>
        </head>
        <body>
            <docs:top-nav/>
            <div class="container">
                <docs:docs heading="RaptorJS: Get Started using the Asynchronous Module Loader" disqus-id="module-loader-get-started-async">
                    <docs:message type="warning">
                        Documentation In-Progress
                    </docs:message>
                        
                    <docs:section heading="Overview">
                        <p>
                            RaptorJS includes a lightweight AMD-compatible package/module loader
                            that allows JavaScript and CSS resources to be downloaded
                            asynchronously after the initial page load. This async
                            loader works in conjunction with the 
                            <a href="${url('/optimizer')}">
                                RaptorJS Optimizer    
                            </a> to efficiently download resources from the server. 
                        </p>
                        <p>
                            The RaptorJS Optimizer is needed to write the optimized
                            resource bundles to disk <i>and</i> and to generate the metadata
                            that the RaptorJS Async Loader requires to
                            efficiently download resources asynchronously. The metadata generated by
                            the RaptorJS Optimizer includes URLs that the loader
                            uses to download resources. This optimically generated metadata
                            removes the need for developers to embedded manually maintained configuration
                            data as part of a webpage.
                            For optimal performance, the async loader will always
                            download resources in <i>parallel</i> and execute resources 
                            in the order that they finish downloading.
                        </p>
                        <p>
                            For simplicity, this guide will make use of
                            <a href="${url('/raptor-templates')}">
                                Raptor Templates
                            </a>
                            and the provided 
                            <a href="${url('/optimizer/taglib')}">
                                RaptorJS Optimizer Taglib
                            </a>
                            to begin using the RaptorJS Async Loader. However,
                            Raptor Templates is not required to use
                            the RaptorJS Async Loader (but it does make things a lot easier out-of-the-box).
                        </p>
                        <p>
                            For this guide, we are going to create a page that includes a module named "module-a" synchronously (as part of the initial page load).
                            In addition, the page will asynchronously download a module named "module-b" when a button is clicked. Both "module-a" and "module-b"
                            will consist of both JavaScript and CSS resources.
                        </p>
                    </docs:section>

                    <docs:section heading="View Demo">
                        <docs:view-demo path="/demos/async-loader" title="Asynchronous Module Loading"/>
                    </docs:section>

                    <docs:section heading="Demo Source">
                        For this guide, we will use the following directory structure:
                        <docs:project-dir-structure dir="/async-loader"/>
                    </docs:section>
                    
                    <docs:section heading="HTML Page Template">
                        <p>
                            Below is the page template ("test-page.rhtml") that we will use for this guide:
                        </p>
                        <docs:code-editor 
                            mode="xml"
                            readOnly="true" 
                            resource="/samples/async-loader/pages/index/index.rhtml"/>
                        <p>
                            You will notice that "module-b" is marked as asynchronous for the page includes in the above template.
                        </p>
                    </docs:section>

                    <docs:section heading="Downloading Modules Asynchronously">
                        <p>
                            The following code is used to download "module-b" asynchronously and
                            then invoke a method on the loaded module:

                        </p>
                        <docs:code-editor 
                            mode="javascript"
                            readOnly="true" 
                            c:parse-body-text="false">

                        <![CDATA[
                        require(['module-b'], function(moduleB) {
                            moduleB.sayHello();
                        });
                        ]]>
                        </docs:code-editor>
                        <p>
                            The source code for "module-b" is the following:
                        </p>
                        <docs:code-editor 
                            mode="javascript"
                            readOnly="true" 
                            resource="/samples/async-loader/modules/module-b/module-b.js"/>
                        <docs:message type="info">
                            <p>
                                If you would like to download multiple modules
                                asynchronously then simply provide an array of module IDs
                                as shown in the following example:
                            </p>
                            <docs:code-editor 
                                mode="javascript"
                                readOnly="true" 
                                c:parse-body-text="false">

                            <![CDATA[
                            require.load(
                                ['module-a', 'module-b'], 
                                function(moduleA, moduleB) {
                                    //Do something with the loaded modules...
                                });
                            ]]>
                            </docs:code-editor>
                            <p>
                                In addition, you can also choose to use the <code>require</code> function
                                to access the modules after they have been loaded:
                            </p>
                            <docs:code-editor 
                                mode="javascript"
                                readOnly="true" 
                                c:parse-body-text="false">

                            <![CDATA[
                            require(
                                ['module-a', 'module-b'], 
                                function() {
                                    var moduleA = require('module-a');
                                    var moduleB = require('module-b');
                                    //Do something with the loaded modules...
                                });
                            ]]>
                            </docs:code-editor>
                        </docs:message>
                    </docs:section>
                    <docs:section heading="Rendering the Page">
                        <p>
                            The sample project includes a script named "build.js" that renders the
                            "test-page.rhtml" template shown above and saves the generated HTML
                            string to "test-page.html" in the root directory. In the process of
                            rendering the page, the RaptorJS Optimizer Taglib will write the optimized
                            resource bundles to disk (along with the metadata required by the 
                            RaptorJS Async Loader).
                        </p>
                        <p>
                            To run the "publish.js" script, use the following command:
                        </p>
                        <pre class="sh" xml:space="preserve" c:trim-body-indent="true">
                        $ node publish.js
                        </pre>
                        <p>
                            You should then see output to the following:
                        </p>
                        <pre class="sh" xml:space="preserve" c:trim-body-indent="true">
                        Generating staticfiles for RaptorJS Async Loader demo...
                        INFO optimizer.BundlesFileWriter: Writing bundle file to "static/test-page-async-body-45012617.js"...
                        INFO optimizer.BundlesFileWriter: Writing bundle file to "static/test-page-async-head-981b6ffe.css"...
                        INFO optimizer.BundlesFileWriter: Writing bundle file to "static/test-page-body-db70adfb.js"...
                        INFO optimizer.BundlesFileWriter: Writing bundle file to "static/test-page-head-d3ec3774.css"...
                        Test page written to "test-page.html"
                        </pre>
                        <p>
                            For this sample project, the generated async loader metadata will look like the following:
                        </p>
                        <docs:code-editor 
                            mode="javascript"
                            readOnly="true" 
                            c:parse-body-text="false">

                        <![CDATA[
                        $rloaderMeta = {
                            "module-b": {
                                "css": ["static/test-page-async-head-981b6ffe.css"],
                                "js":  ["static/test-page-async-body-45012617.js"]
                            }
                        };
                        ]]>
                        </docs:code-editor>
                        <p>
                            The above code shows the URLs that will be downloaded
                            when "module-b" is required asynchrously.
                        </p>
                    </docs:section>
                    
                </docs:docs>
            </div>
            
            <optimizer:slot name="body"/>
            
            <w:init-widgets/>
        </body>
    </html>
</c:template>

