<c:template
    xmlns:c="core"
    xmlns:html="html"
    xmlns:optimizer="optimizer"
    xmlns:w="widgets"
    xmlns:docs="docs"
    params="includes,samples"
    docs:functions="url">

    <optimizer:page name="${data.pageName}" base-path="${data.pageOutputDir}">
        <dependencies>
            <module name="docs-global"/>
            <module name="components/nav/TopNavDefault"/>
            <module name="components/docs/Docs"/>
            <module name="components/icons/Icon"/>
            <css path="index.css"/>
        </dependencies>
    </optimizer:page>

    
    <html html:doctype="html">
        <docs:head title="RaptorJS: Get Started using the Asynchronous Module Loader">
        </docs:head>
        <body>
            <docs:top-nav/>
            <div class="container">
                <docs:docs heading="RaptorJS: Get Started using the Asynchronous Module Loader" disqus-id="module-loader-get-started-async">
                        
                    <docs:section heading="Overview">
                        <p>
                            RaptorJS includes a lightweight AMD-compatible package/module loader
                            that allows JavaScript and CSS resources to be downloaded
                            asynchronously after the initial page load. This async
                            loader works in conjunction with the 
                            <a href="${url('/optimizer')}">
                                RaptorJS Optimizer    
                            </a> to efficiently download resources from the server. 
                        </p>
                        <p>
                            The RaptorJS Optimizer is needed to write the optimized
                            resource bundles to disk <i>and</i> and to generate the metadata
                            that the RaptorJS Async Loader requires to
                            efficiently download resources asynchronously. The metadata generated by
                            the RaptorJS Optimizer includes URLs that the loader
                            uses to download resources. This optimically generated metadata
                            removes the need for developers to embedded manually maintained configuration
                            data as part of a webpage.
                            For optimal performance, the async loader will always
                            download resources in <i>parallel</i> and execute resources 
                            in the order that they finish downloading.
                        </p>
                        <p>
                            For simplicity, this guide will make use of
                            <a href="${url('/raptor-templates')}">
                                Raptor Templates
                            </a>
                            and the provided 
                            <a href="${url('/optimizer/taglib')}">
                                RaptorJS Optimizer Taglib
                            </a>
                            to begin using the RaptorJS Async Loader. However,
                            Raptor Templates is not required to use
                            the RaptorJS Async Loader (but it does make things a lot easier out-of-the-box).
                        </p>
                        <p>
                            For this guide, we are going to create a page that includes a module named "module-a" synchronously (as part of the initial page load).
                            In addition, the page will asynchronously download a module named "module-b" when a button is clicked. Both "module-a" and "module-b"
                            will consist of both JavaScript and CSS resources.
                        </p>
                    </docs:section>

                    <docs:section heading="View Demo">
                        <docs:view-demo path="/demos/async-loader" title="Asynchronous Module Loading"/>
                    </docs:section>

                    <docs:section heading="Demo Source">
                        <docs:project-dir-structure dir="/async-loader"/>
                    </docs:section>
                    
                    <docs:section heading="HTML Page Template">
                        <p>
                            Below is the page template that we will use for this guide:
                        </p>
                        <docs:code-editor 
                            mode="xml"
                            readOnly="true" 
                            resource="/samples/async-loader/pages/index/index.rhtml"
                            title="/pages/index/index.rhtml"/>
                        <p>
                            You will notice that "module-b" is marked as "async" in the above template.
                            The purpose of the "async" attribute is explained in the <a href="#AsyncModules">Asynchronously Loaded Modules</a> section below.
                        </p>
                    </docs:section>

                    <docs:section heading="HTML Output">
                        <p>
                            When the above template is rendered output similar to the following will be produced:
                        </p>
                        <docs:code-editor 
                            mode="htmlmixed"
                            readOnly="true" 
                            title="build/index.html"
                            c:parse-body-text="false">

                        <![CDATA[
                        <!DOCTYPE html>
                        <html>
                            <head>
                                <title>Async Module Loading Test Page</title>
                                <link rel="stylesheet" type="text/css" href="static/index-1a51f97d.css">
                            </head>
                            <body>
                                <button type="button" onclick="TestPage.loadModuleBAsync()">Load "module-b" Asynchrously</button>
                                <script type="text/javascript" src="static/index-04722da0.js"></script>
                            </body>
                        </html>
                        ]]>
                        </docs:code-editor>

                    </docs:section>

                    <docs:section heading="Asynchronously Loaded Modules" anchor-name="AsyncModules">
                        <p>
                            By default, the RaptorJS Optimizer will include the code for a module
                            as part of the initial page load by generating the appropriate 
                            &lt;link> and &lt;script> tags that include the optimized bundles. However, when a page dependency is marked
                            as "async" the RaptorJS Optimizer will instead only include enough
                            metadata so that the module can be downloaded asynchronously when needed. For
                            example, because "module-b" is marked as async, the following JavaScript code
                            will be included as part of JavaScript code included in the initial page load:
                        </p>
                        <docs:code-editor 
                            mode="javascript"
                            readOnly="true" 
                            c:parse-body-text="false">

                        <![CDATA[
                        $rloaderMeta = {
                            "module-b": {
                                css: ["static/index-async-21cbcb13.css"],
                                js:  ["static/index-async-f4a3ad20.js"]
                            }
                        };
                        ]]>
                        </docs:code-editor>
                        <p>
                            The above metadata provides the client-side
                            asynchronous module loader with the exact URLs that are needed
                            to load the module asynchronously. There is
                            no guess work on the client-side and all of the URLs include
                            exact checksums (by default) and can easily be configured
                            to use a host name for a Content Distribution Network (CDN).
                        </p>

                    </docs:section>

                    <docs:section heading="Downloading Modules Asynchronously">
                        <p>
                            The following code is used to download "module-b" asynchronously and
                            then invoke a method on the loaded module:
                        </p>
                        <docs:code-editor 
                            mode="javascript"
                            readOnly="true" 
                            c:parse-body-text="false">

                        <![CDATA[
                        require(['module-b'], function(moduleB) {
                            moduleB.sayHello();
                        });
                        ]]>
                        </docs:code-editor>
                        <p>
                            The source code for "module-b" is the following:
                        </p>
                        <docs:code-editor 
                            mode="javascript"
                            readOnly="true" 
                            resource="/samples/async-loader/modules/module-b/module-b.js"/>
                        <docs:message type="info">
                            <p>
                                If you would like to download multiple modules
                                asynchronously then simply provide an array of module IDs
                                as shown in the following example:
                            </p>
                            <docs:code-editor 
                                mode="javascript"
                                readOnly="true" 
                                c:parse-body-text="false">

                            <![CDATA[
                            require(
                                ['module-a', 'module-b'], 
                                function(moduleA, moduleB) {
                                    //Do something with the loaded modules...
                                });
                            ]]>
                            </docs:code-editor>
                            <p>
                                In addition, you can also choose to use the <code>require</code> function
                                to access the modules after they have been loaded:
                            </p>
                            <docs:code-editor 
                                mode="javascript"
                                readOnly="true" 
                                c:parse-body-text="false">

                            <![CDATA[
                            require(
                                ['module-a', 'module-b'], 
                                function() {
                                    var moduleA = require('module-a');
                                    var moduleB = require('module-b');
                                    //Do something with the loaded modules...
                                });
                            ]]>
                            </docs:code-editor>
                        </docs:message>
                    </docs:section>
                    <docs:section heading="Building the Sample">
                        <p>
                            The sample project includes a build script named <code><a href="https://github.com/raptorjs/samples/blob/master/async-loader/build.js">build.js</a></code> that renders the
                            <code><a href="https://github.com/raptorjs/samples/blob/master/async-loader/pages/index/index.rhtml">pages/index/index.rhtml</a></code> template shown above and saves the generated HTML
                            string to <code><a href="https://github.com/raptorjs/raptorjs.github.com/blob/master/demos/async-loader/index.html">build/index.html</a></code> . In the process of
                            rendering the page, the RaptorJS Optimizer Taglib will write the optimized
                            resource bundles to disk (along with the metadata required by the 
                            RaptorJS Async Loader).
                        </p>
                        <p>
                            Please see the following documentation for additional information for building the sample project:
                            <a href="https://github.com/raptorjs/samples/tree/master/async-loader/README.md"></a>
                        </p>
                    </docs:section>
                    
                </docs:docs>
            </div>
            
            <optimizer:slot name="body"/>
            
            <w:init-widgets/>
        </body>
    </html>
</c:template>

