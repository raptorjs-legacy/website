<c:template
    xmlns:c="core"
    xmlns:html="html"
    xmlns:optimizer="optimizer"
    xmlns:w="widgets"
    xmlns:docs="docs"
    params="includes,samples"
    docs:functions="url">

    <optimizer:page name="${data.pageName}" base-path="${data.pageOutputDir}">
        <dependencies>
            <module name="docs-global"/>
            <module name="components/nav/TopNavDefault"/>
            <module name="components/docs/Docs"/>
            <module name="components/icons/Icon"/>
            <css path="index.css"/>
        </dependencies>
    </optimizer:page>
    
    
    <html html:doctype="html">
        <docs:head title="Raptor Templates: Developer Guide">
        </docs:head>
        <body data-spy="scroll">
            <docs:top-nav/>
            <div class="container">
                <docs:docs heading="Raptor Templates: Developer Guide" return-label="Raptor Templates" return-href="${url('/raptor-templates')}" disqus-id="raptor-templates-developer-guide">
                    <docs:message type="warning">
                        Documentation In-Progress
                    </docs:message>
                    
                    <docs:section heading="Overview">
                        <div class="try-it">
                            <h1><docs:icon name="play-circle" size="large"/> <a href="${url('/raptor-templates/try-online')}" target="_blank">Try Raptor Templates Online</a></h1>
                            <div class="desc">Edit Raptor Templates in your browser with instant results!</div>
                        </div>
                        
                        <p>
                            The Raptor Templating Language is heavily inspired by  
                            <a href="http://genshi.edgewall.org/wiki/Documentation/xml-templates.html">Genshi XML Template Language</a> 
                            (an XML-based templating language for Python) with the good parts of JSP mixed in. The Raptor 
                            Templating Language borrows most of the same features from Genshi and includes a 
                            JavaScript compiler so that a template can be compiled to native JavaScript code.
                            The templating language is XML-based so that the XML structure
                            of an HTML document can be used to its full advantage to make it easier for developers
                            write easily readable templates and to provide optimal output—including improved readability and
                            optimized output.
                        </p>
                        <p>
                            The Raptor Templating language is a proven templating language that
                            is being used at eBay in applications where every millisecond
                            and byte counts. eBay will continue to invest in Raptor Templates
                            to ensure that it has a very healthy ecosystem.
                        </p>
                    </docs:section>
                    
                    <docs:section heading="Features at a Glance">
                        <ul>
                            <li>
                                Not dogmatic—the decision to be logic-less, less-logic or more-logic is left to the users
                            </li>
                            <li>
                                Easily extensible
                                <ul>
                                    <li>Taglibs for easy extensibility</li>
                                    <li>Allows full control over compiled output</li>
                                    <li>Custom tag handlers with support for both compile-time tag handlers and runtime tag handlers</li>
                                    <li>Custom helper functions</li>
                                    <li>Custom compile-time template transformers</li>
                                </ul>
                            </li>
                            <li>
                                Works in any JavaScript environment—including on the server (Node and Rhino) and in all web browsers  
                            </li>
                            <li>XML-based
                                <ul>
                                    <li>Smarter compiler that leverages the structure of HTML documents</li>
                                    <li>Easy to validate</li>
                                    <li>Extensible</li>
                                    <li>Easily parseable with any off-the-shelf XML parser</li>
                                </ul>
                            </li>
                            <li>
                                Designed with readability and code maintenance in mind
                            </li>
                            <li>
                                Optimized compiled output
                                <ul>
                                    <li>Templates are compiled to native JavaScript functions</li>
                                    <li>Compiled code generated with minification in mind</li>
                                    <li>Smart compiler and optimizer</li>
                                </ul>
                            </li>
                            <li>
                                Optimized runtime
                                <ul>
                                    <li>Lightweight runtime</li>
                                    <li>Optimized for performance and scalability</li>
                                </ul>
                            </li>
                            <li>Leverages the full power of JavaScript
                                <ul>
                                    <li>All expressions are JavaScript expressions (<code>eval</code> is <i>never</i> used)</li>
                                    <li>Templates and macros compile down to native JavaScript functions</li>
                                    <li>Conditional directives compile down to native JavaScript if-statements and similar for most other directives</li>
                                    <li>Function closures utilized for scoped variables and nesting</li>
                                </ul>
                            </li>
                            <li>
                                <docs:popover title="Smart Whitespace Removal">
                                    <c:attr name="content">
                                        <p>
                                            The compiler understands that whitespace inside <code>&lt;textarea></code>
                                            and <code>&lt;textarea></code> tags should be preserved.
                                        </p>
                                        <p>
                                            Since templats are XML-based, the compiler knows that 
                                            extra whitespace between XML elements can be removed
                                            and that extra whitespace in body text can be removed.
                                        </p>
                                    </c:attr>
                                    Smart whitespace removal
                                </docs:popover>
                            </li>
                            <li>
                                Helpful error messages that provide friendly messages and line/column numbers.
                            </li>
                            <li>
                                Compiled code is nicely formatted and easy to debug
                            </li>
                            
                        </ul>            
                    </docs:section>
                    
                    <docs:section heading="Language Overview">
                        <p>
                            All Raptor templates are required to be well-formed XML. This
                            constraint allows the template language to use the structure of the
                            XML document to its advantage. For example, a template directive
                            that controls structural logic can be applied as an attribute of the
                            element that it controls. In addition, unlike in non-XML-based
                            templating languages, whitespace removal rules are based on the XML
                            structure and not a string language directives. Despite a template
                            being well-formed XML, the output does not have to be well-formed
                            XML which makes the Raptor Templating Language flexible enough for
                            using in all types of web applications.
                        </p>
                        <p>
                            The Raptor Templating Language aims to be easy to understand by utilizing
                            concepts that front-end developers are already familiar with such as
                            XML/HTML and JavaScript. While the Raptor Templating Language
                            introduces a new grammar on top of XHTML, it is not an entirely new
                            language which reduces the learning curve.
                        </p>
                        <p>
                            For more information on the Raptor Templates language please
                            see the following documentation:
                            <a href="${url('/raptor-templates/language-guide')}">
                                Raptor Templates: Language Guide
                            </a>
                        </p>
                    </docs:section>
                    
                    <docs:section heading="JavaScript API">
                        <p>
                        </p>
                        <docs:section heading="Template Rendering">
                            <p>
                            </p>
                            <docs:section heading="Rendering to a String">
                                <p>
                                    The <code>template.renderToString(templateName, template-data)</code> 
                                    method can be used to render a template to a string.
                                </p>
                                <docs:code-editor 
                                    mode="javascript"
                                    readOnly="true" 
                                    c:parse-body-text="false">
                                <![CDATA[
                                var templating = require('raptor/templating');
                                var output = templating.renderToString(
                                    "test/Person", 
                                    {
                                        person: person
                                    });
                                ]]>
                                </docs:code-editor>
                                <docs:message type="info">
                                    <p>
                                        NOTE: On the server, if the template cannot be found then the templating
                                        module will convert the template name to a path and try to load the
                                        template. The templating module actually checks two paths as illustrated by the following:
                                    </p>    
                                    
                                    Input template name: <code>"test/Person"</code><br/>
                                    Paths checked: 
                                    <ol>
                                        <li><code>/test/Person.rhtml</code></li>
                                        <li><code>/test/Person/Person.rhtml</code></li>
                                    </ol>
                                </docs:message>
                            </docs:section>
                            
                            <docs:section heading="Rendering to a Context">
                                <p>
                                    Instead of rendering a template to a new string, the output of
                                    rendering a template can be added to an existing "context". A context
                                    is an object that gets created every time a template is rendered
                                    if a context is not provided. At a minimum, a context should
                                    contain a <code>write(str)</code> method that is used to add output
                                    to an output buffer and a <code>getOutput()</code> method that is
                                    used to get the string output.
                                </p>
                                <p>
                                    The following code illustrates how to render a template to an
                                    existing context:
                                </p>
<docs:code-editor 
    mode="javascript"
    readOnly="true" 
    c:parse-body-text="false"
><![CDATA[var templating = require('raptor/templating');
var context = templating.createContext();
templating.render("test/Person", {person: person}, context);
var output = context.getOutput();]]></docs:code-editor>

                            </docs:section>
                            
                        </docs:section>
                        
                        <docs:section heading="Template Compilation">
                            <p>
                            </p>
                            <docs:section heading="Compiling a Template">
                                <p>
                                    If you prefer to only compile a code to JavaScript then
                                    the following code can be used:
                                </p>
<docs:code-editor 
    mode="javascript"
    readOnly="true" 
    c:parse-body-text="false"
><![CDATA[var compiler = require('raptor/templating/compiler');
var compilerOptions = {
    preserveWhitespace: true
};
var jsSource = compiler.compile('<c:template \
        xmlns:c="core"> \
        name="greeting" \
        params="name"> \
            Hello ${name}! \
        </c:template>', 
        compilerOptions);]]></docs:code-editor>
                                <docs:message type="info">
                                    The the <code>compilerOptions</code> argument is optional but 
                                    allows additional options to be passed to the compiler to control
                                    the compiled output. The default options are the following:
<docs:code-editor 
    mode="javascript"
    readOnly="true" 
    c:parse-body-text="false"
><![CDATA[{
    minify: false,
    preserveWhitespace: {
        'pre': true,
        'textarea': true
    },
    allowSelfClosing: {
        'script': false,
        'div': false,
        'textarea': false,
        'li': false,
        'b': false,
        'a': false,
        'i': false
    },
    startTagOnly: {
        'img': true,
        'br': true,
        'input': true
    }
}]]></docs:code-editor>
                                    <p>
                                        For more details on the supported compiler options please see the following sub-page:
                                    </p>
                                    <ul>
                                        <li><a href="${url('/raptor-templates/compilation')}">Advanced ${entity:raquo} Raptor Templates Compilation</a></li>
                                    </ul>
                                </docs:message>
                            </docs:section>
                            
                            <docs:section heading="Loading a Compiled Template">
                                <p>
                                </p>    
                            </docs:section>
                            
                        </docs:section>
                    </docs:section>
                    
                    <docs:section heading="Performance">
                        <p>
                            Raptor Templates were designed for optimal performance for
                            use in applications with the toughest constraints by producing
                            compiled templates with the minimal amount of code while
                            also focusing on runtime performance.
                        </p>
                        <p>
                            The compiled output of Raptor Templates is kept minimal to reduce the amount of bytes
                            that need to be sent over the wire and to reduce the amount
                            of time that is required for a template's compiled code
                            to be parsed and executed by a JavaScript environment.
                            Local variables are used wherever possible to improve
                            minification and short method names are used to keep
                            the compiled size to a minimum.
                        </p>
                        <p>
                            The rendering time of Raptor Templates is kept to a minimum
                            by fine-tuning the compiler. In addition, developers
                            have complete flexibility to control how the compiled
                            output is generated to allow for the most demanding
                            performance constraints.   
                        </p>
                        <docs:section heading="Sample Compiled Template">
                            <docs:code-editor 
                                title="Input Template"
                                mode="xml"
                                readOnly="true" 
                                c:parse-body-text="false">
                            <![CDATA[
                            <c:template 
                                xmlns:c="core" 
                                params="name,colors">
                                
                                Hello $name!

                                <c:choose>
                                    <ul c:when="notEmpty(colors)">
                                        <li c:for="color in colors">
                                            $color
                                        </li>
                                    </ul>
                                    <div c:otherwise="">
                                        No colors!
                                    </div>
                                </c:choose>
                                
                            </c:template>
                            ]]>
                            </docs:code-editor>
                            <docs:code-editor 
                                title="Unminified Compiled Output"
                                mode="javascript"
                                readOnly="true" 
                                c:parse-body-text="false">
                            <![CDATA[
                            $rset("rhtml", "test", function(helpers){
                              var empty=helpers.e,
                                  notEmpty=helpers.ne,
                                  escapeXml=helpers.x,
                                  forEach=helpers.f;

                              return function(data, context){
                                var name=data.name,
                                    colors=data.colors;

                                context.w('Hello ')
                                  .w(escapeXml(name))
                                  .w('!');
                                if (notEmpty(colors)) {
                                  context.w('<ul>');
                                  forEach(colors, function(color) {
                                    context.w('<li>')
                                      .w(escapeXml(color))
                                      .w('</li>');
                                  });

                                  context.w('</ul>');
                                } else {
                                  context.w('<div>No colors!</div>');
                                }

                              }
                            });
                            ]]>
                            </docs:code-editor>
                            <docs:code-editor 
                                title="Minified Compiled Output"
                                mode="javascript"
                                readOnly="true" 
                                c:parse-body-text="false">
                            <![CDATA[
                            $rset("rhtml","test",function(a){var e=a.ne,c=a.x,f=a.f;return function(a,b){var g=a.name,d=a.colors;b.w("Hello ").w(c(g)).w("!");e(d)?(b.w("<ul>"),f(d,function(a){b.w("<li>").w(c(a)).w("</li>")}),b.w("</ul>")):b.w("<div>No colors!</div>")}});
                            ]]>
                            </docs:code-editor>
                            <table class="sizes table table-bordered">
                                <thead>
                                    <tr>
                                        <th>
                                            
                                        </th>
                                        <th>
                                            Uncompressed
                                        </th>
                                        <th>
                                            Gzipped
                                        </th>
                                    </tr>
                                </thead>
                                <tbody>
                                    <tr>
                                        <td>
                                            Original Size:
                                        </td>
                                        <td>
                                            454 bytes
                                        </td>
                                        <td>
                                            248 bytes
                                        </td>
                                    </tr>
                                    <tr>
                                        <td>
                                            Compiled Size:
                                        </td>
                                        <td>
                                            243 bytes
                                        </td>
                                        <td>
                                            178 bytes
                                        </td>
                                    </tr>
                                </tbody>
                            </table>
                            Saved 46.48% off the original size (28.23% off the gzipped size)
                        </docs:section>
                    </docs:section>
                    
                    <docs:section heading="Advanced">
                        <p>
                        </p>
                        <docs:section heading="Creating Taglibs">
                            <p>
                                Please see the sub-page, 
                                <a href="${url('/raptor-templates/taglibs')}">Creating Taglibs</a>, 
                                for more details.
                            </p>
                        </docs:section>
                        <docs:section heading="Raptor Templates Compilation">
                            <p>
                                Please see the sub-page, 
                                <a href="${url('/raptor-templates/compilation')}">Raptor Templates Compilation</a>, 
                                for more details.
                            </p>

                        </docs:section>
                    </docs:section>
                    
                </docs:docs>
            </div>
            <optimizer:slot name="body"/>
            
            <w:init-widgets/>
        </body>
    </html>
</c:template>

