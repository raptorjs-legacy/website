<c:template
    xmlns:c="core"
    xmlns:html="html"
    xmlns:optimizer="optimizer"
    xmlns:w="widgets"
    xmlns:docs="docs"
    params="includes,samples"
    docs:functions="url">

    <optimizer:page name="${data.pageName}" base-path="${data.pageOutputDir}">
        <dependencies>
            <module name="docs-global"/>
            <module name="components/nav/TopNavDefault"/>
            <module name="components/docs/Docs"/>
            <module name="components/icons/Icon"/>
            <css path="index.css"/>
        </dependencies>
    </optimizer:page>    

    
    <html html:doctype="html">
        <docs:head title="RaptorJS: Packaging Developer Guide">
        </docs:head>
        <body>
            <docs:top-nav/>
            
            
            <div class="container">
                <docs:docs heading="Packaging Developer Guide" disqus-id="packaging-developer-guide">

                    <c:include template="/pages/packaging/shared-content/overview.rhtml" />

                    <docs:section heading="Package Format">
                        <p>
                            The RaptorJS package format extends the 
                            <a href="http://wiki.commonjs.org/wiki/Packages/1.0#Package_Descriptor_File">
                                CommonJS Packages 1.0 Specification
                            </a> format in a compatible way. RaptorJS package
                            and a standard CommonJS package is that a RaptorJS package introduces a 
                            new top-level <code>raptor</code> property. The value of the <code>raptor</code> property
                            is an object that may contain two nested properties:
                        </p>
                        <ul>
                            <li>
                                <b>dependencies</b>: An array of RaptorJS dependencies.
                            </li>
                            <li>
                                <b>extensions</b>: An array of named extensions, each which contains additional
                                                   environment-specific dependencies.
                            </li>
                        </ul>
                        <docs:section heading="Sample RaptorJS Package">
                            <p>
                                A sample RaptorJS package is shown below:
                            </p>
                            <docs:code-editor 
                                    autoResize="true"
                                    indentUnit="4"
                                    readOnly="true"
                                    mode="javascript">
                            <![CDATA[
                            {
                                "name": "my-module",
                                "version": "1.0",
                                "description": "My amazing module.",
                                "raptor": {
                                    "dependencies": [
                                        { "module": "another-module" },
                                        "my-module-common.js",
                                    ],
                                    "extensions": [
                                        {
                                            "name": "server",
                                            "dependencies": [
                                                "my-module-server.js"
                                            ]
                                        },
                                        {
                                            "name": "browser",
                                            "dependencies": [
                                                "my-module.less"
                                            ]
                                        }
                                    ]
                                }   
                            }
                            ]]>
                            </docs:code-editor>
                        </docs:section>
                        <docs:section heading="Dependencies Format" anchor-name="DependenciesFormat">
                            <p>
                                Dependencies are provided as an array to maintain order.
                                Each dependency may be a complex JSON <code>object</code> or a simple
                                JSON <code>string</code>. When a dependency is provided
                                as an <code>object</code>, the <code>type</code> property
                                is used to determine the dependency type. For example:
                            </p>
                            <docs:code-editor 
                                    autoResize="true"
                                    indentUnit="4"
                                    readOnly="true"
                                    mode="javascript">
                            <![CDATA[
                            "dependencies": [
                                { "type": "module", "name": "my-module" },
                                { "type": "js", "path": "widget.js" }
                            ]
                            ]]>
                            </docs:code-editor>
                            <p>
                                RaptorJS packages support a short-hand for resource dependencies
                                by allowing the dependency to be provided as a simple <code>string</code>
                                path. When a <code>string</code> dependency is encountered the file extension is used
                                to determine the type. For example:
                            </p>
                            <docs:code-editor 
                                    autoResize="true"
                                    indentUnit="4"
                                    readOnly="true"
                                    mode="javascript">
                            <![CDATA[
                            "dependencies": [
                                "widget.js"
                            ]
                            ]]>
                            </docs:code-editor>
                            <p>
                                If a <code>string</code> dependency does not have a file extension
                                then it is treated as a module name. For example:
                            </p>
                            <docs:code-editor 
                                    autoResize="true"
                                    indentUnit="4"
                                    readOnly="true"
                                    mode="javascript">
                            <![CDATA[
                            "dependencies": [
                                "my-module"
                            ]
                            ]]>
                            </docs:code-editor>
                            <p>
                                Lastly, a few additional short-hand dependencies are supported as
                                shown below:
                            </p>
                            <ul>
                                <li>
                                    <b>Module</b>: <code>{ "module": "my-module" }</code>
                                </li>
                                <li>
                                    <b>Resource</b>: <code>{ "path": "widget.js" }</code>
                                </li>
                            </ul>
                        </docs:section>

                        <docs:section heading="Extensions Format">
                            <p>
                                Extensions are provided as an array of objects using the
                                <code>extensions</code> property as a property of the top-level <code>raptor</code> object.
                                Each extension supports the following properties:
                            </p>
                            <ul>
                                <li>
                                    <b>name</b>: The name of the extension. The name of the extension is arbitrary, but
                                                 there are a few well-defined names such as "server", "browser", "node", "rhino", etc.
                                                 The dependencies associated with an extension will only be included
                                                 if an extension with the provided name is <a href="#EnablingExtensions">enabled</a>.
                                                 For more details on extension names see 
                                                 <a href="#ExtensionNames">
                                                    Extension Names below
                                                 </a>.
                                </li>
                                <li>
                                    <b>dependencies</b>: An array of dependencies. See 
                                                <a href="#DependenciesFormat">
                                                    Dependencies Format
                                                 </a> above for details.
                                </li>
                                <li>
                                    <b>condition</b>: A JavaScript that will be evaluated at runtime to determine
                                                      if the dependencies for the extension should be included.
                                                      See 
                                                      <a href="#ExtensionConditions">
                                                        Extension Conditions
                                                    </a> below for details.
                                </li>
                            </ul>
                            <docs:section heading="Extension Conditions" anchor-name="ExtensionConditions">
                                <p>
                                    An extension definition can also include a <code>condition</code>
                                    property that defines a JavaScript expression that is evaluated
                                    at runtime to determine whether or not the dependencies for the
                                    extension should be included. An example extension with with
                                    a condition is shown below:
                                </p>
                                <docs:code-editor 
                                    autoResize="true"
                                    indentUnit="4"
                                    readOnly="true"
                                    mode="javascript">
                                <![CDATA[
                                {
                                    
                                    "raptor": {
                                        
                                        "extensions": [
                                            {
                                                "name": "my-extension",
                                                "condition": "!extensions.contains('jquery')",
                                                "dependencies": [
                                                    "no-jquery.js"
                                                ]
                                            }
                                        ]
                                    }   
                                }
                                ]]>
                                </docs:code-editor>
                                <p>
                                    When using extension conditions, <code>extensions</code> is an object
                                    that represents the list of enabled extensions. For more details, see the API docs for
                                    <a href="http://raptorjs.org/api/packaging.ExtensionCollection/">
                                        packaging.ExtensionCollection
                                    </a>.
                                </p>
                                <p>
                                    Any valid JavaScript expression is allowed, but the JavaSript expression should only
                                    make use of the provided <code>extensions</code> object.
                                </p>
                                <docs:message type="info">
                                    <p>
                                        If an extension condition is provided, then the extension name is not used
                                        to determine if the extension is enabled (only the condition is used).
                                    </p>
                                </docs:message>
                            </docs:section>
                        </docs:section>

                        
                    </docs:section>

                    


                    <docs:section heading="Module Dependencies">
                        <p>
                            RaptorJS packages allow transitive dependencies to be declared. Transitive
                            dependencies can be declared by adding another module as a dependency. Every
                            RaptorJS module is expected to have a corresponding <code>package.json</code>
                            file that describes the dependencies for the module. RaptorJS
                            resolves a module name to a <code>package.json</code> file
                            based on the name of the module. That is, the <code>package.json</code>
                            is expected to be located in a directory based on the module name.
                        </p>
                        <docs:section heading="Resolving Module package.json Files">
                            <p>
                                RaptorJS will try a few different possible resource paths when
                                trying to resolve a module name to a <code>package.json</code> file.
                                For a module named "some/namespace/my-module",
                                the <code>package.json</code> should be placed in one of the following locations:
                            </p>
                            <ol>
                                <li>&lt;path-to-modules>/some/namespace/my-module/package.json</li>
                                <li>&lt;path-to-modules>/some/namespace/my-module-package.json</li>
                            </ol>
                            <p>
                                The second usage (i.e. "my-module-package.json"), allows multiple packages to be placed
                                in the same directory.
                            </p>
                        </docs:section>
                        <docs:section heading="Module Path Mappings">
                            <p>
                                To bypass the default module package resolution steps, a module name can be
                                mapped to a <code>package.json</code> file by adding the mapping to a 
                                <a href="#TopLevelPackages">
                                    top-level <code>package.json</code></a>
                                file. For example:
                            </p>
                            <docs:code-editor 
                                autoResize="true"
                                indentUnit="4"
                                readOnly="true"
                                mode="javascript">
                            <![CDATA[
                            {
                                "raptor": {

                                    "module-mappings": {
                                        "my-module": "/some/path/to-module-package.json",
                                        ...
                                    }
                                }
                            }
                            ]]>
                            </docs:code-editor>
                            
                        </docs:section>

                        

                    </docs:section>

                    <docs:section heading="Extensions">
                        <p>
                            Extensions represent conditional environment-specific
                            dependencies. If a condition is not provided for an extension
                            then the extension name is used to determine if the dependencies
                            for the extension should be included. If an extension name
                            is marked as enabled then the dependencies associated with the
                            extension will be enabled, otherwise they will be ignored.
                        </p>
                        <docs:section heading="Extension Names" anchor-name="ExtensionNames">
                            <p>
                                Extension names are arbitrary strings. An application
                                can choose to enable any set of arbitrary extension names. For example,
                                an application might decide to introduce an extension
                                named "tablet" to define dependencies that are specific
                                to table devices.
                            </p>
                            <p>
                                There are, however, well-known extension names for the various environments:
                            </p>
                            <ul>
                                <li>
                                    <b>server</b> - Enabled for any server-side JavaScript environment (e.g. Node and Rhino)
                                </li>
                                <li>
                                    <b>node</b> - Enabled for Node only
                                </li>
                                <li>
                                    <b>rhino</b> - Enabled for Rhino only
                                </li>
                                <li>
                                    <b>browser</b> - Enabled for the browser only
                                </li>
                                <li>
                                    <b>jquery</b> - Enabled for environments that have jQuery loaded
                                </li>
                                <li>
                                    <b>development</b> - Enabled for development (i.e. non-production) environments only
                                </li>
                            </ul>
                        </docs:section>

                        <docs:section heading="Enabling Extensions" anchor-name="EnablingExtensions">
                            <p>
                                RaptorJS package files are read by the server-side 
                                <a href="${url('/module-loader')}">
                                    <nobr>RaptorJS JavaScript Module Loader</nobr>
                                </a> and  the <a href="${url('/optimizer')}">
                                    <nobr>RaptorJS Optimizer</nobr>
                                </a>. To enable extensions for modules loaded on the server, the
                                following code can be used:
                            </p>
                            <docs:code-editor 
                                autoResize="true"
                                indentUnit="4"
                                readOnly="true"
                                mode="javascript">
                            <![CDATA[
                            require('raptor/packaging').enableExtension('myExtension');
                            ]]>
                            </docs:code-editor>
                        </docs:section>
                    </docs:section>

                    <docs:section heading="Top-level Packages" anchor-name="TopLevelPackages">
                        <p>
                            Top-level packages are packages named <code>package.json</code>
                            and placed in the root of a 
                            <a href="${url('/resource-search-path')}">
                                Resource Search Path
                            </a>
                            entry. Various modules
                            that are part of RaptorJS use these packages to discover certain information 
                            at runtime. The RaptorJS <a href="http://raptorjs.org/api/raptor/packaging/">raptor/packaging</a>
                            module provides a helper <code>forEachTopLevelPackageManifest</code> that can be used to iterate over all of the cached top-level
                            packages as shown in the following code:
                        </p>
                        <docs:code-editor 
                            autoResize="true"
                            indentUnit="4"
                            readOnly="true"
                            mode="javascript">
                        <![CDATA[
                        packaging.forEachTopLevelPackageManifest(function(manifest) {
                            var taglibs = manifest.getRaptorProp('taglibs');
                            if (taglibs) {
                                ...
                            }
                        }, this);
                        ]]>
                        </docs:code-editor>
                        <p>
                            Please see the following source file that illustrates
                            how the <a href="${url('/raptor-templates')}">Raptor Templates</a> compiler discovers taglibs:
                            <a href="https://github.com/raptorjs/raptorjs/blob/master/lib/raptor/templating/compiler/compiler_server.js">
                                <nobr>raptor/templating/compiler/compiler_server.js</nobr>
                            </a>
                        </p>


                    </docs:section>

                    <docs:section heading="Package Dependency Types">
                        <p>
                            RaptorJS relies on registered handlers for package dependency types
                            to determine how to handle dependencies. A dependency can
                            either be a resource dependency (i.e., either a JavaScript or CSS resource
                            or a resource that compiles into either JavaScript or CSS) or a package
                            dependencncy (i.e., a dependency that resolves into another <code>package.json</code> file).
                        </p>
                        <p>
                            Resource dependency handlers must implement the <code>getContentType</code> method and the
                            <code>getCode</code> method. If the content type for a resource dependency
                            is "application/javascript" then the <code>getCode</code> method will be used
                            to load the dependency into a server-side JavaScript environment if necessary
                            unless the <code>load</code> method is implemented.
                        </p>
                        <p>
                            For examples of dependency handlers, please see the API docs for the
                            <a href="http://raptorjs.org/api/packaging/">
                                packaging
                            </a> module.
                        </p>
                        <docs:section heading="Registering Dependency Handlers" anchor-name="RegisteringDependencyTypes">
                            <p>
                                Dependency type handlers can be registered inside any 
                                <a href="#TopLevelPackages">top-level <code>package.json</code> file</a>. The "dependency-types" property is used to register dependency type handlers.
                                For an example, please see the the core RaptorJS <code>package.json</code> file for the RaptorJS
                                library:
                                <a href="http://raptorjs.org/api/source/package.json/">
                                    https://github.com/raptorjs/raptorjs/blob/master/lib/package.json
                                </a>
                            </p>
                        </docs:section>
                    </docs:section>
                    
                </docs:docs>
            </div>
            
            <optimizer:slot name="body"/>
            
            <w:init-widgets/>
        </body>
    </html>
</c:template>

